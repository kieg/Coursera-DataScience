help(package="ggplot2")
fib
ls(facebookData)
facebookData<- read.delim("http://www.statisticshell.com/r_files/FacebookNarcissism.dat")
ls(facebookData)
ls.str(facebookData)
str(facebookData)
x <- c(1,2,3,4,5,6,7,8,9,10)
y <- c(100,200,340,928,59,89,500,190,700,2
)
plot(x)
plot(x,y)
Data <- data.frame(x,y)
plot(Data)
z <- c(3,6,9,12,15,18,21,24,27,30)
Data <- data.frame(x,y,z)
Data
plot(Data)
plot(x, main="The Title", xlab="X-axis Label", ylab="Y-axis Label")
grid()
grid()
grid=FALSE
point(cars)
points(cars)
plot(x,y, pch=as.integer(f))
z.2 <- as.factor(c(x,y))
z.2
z.2 <- c(x,y)
z.2
z.2 <- Data[x.y]
z.2 <- Data[x,y]
Data
z.2 <- Data[Data$x,Data$y]
Data$x
z.2 <- Data[c(Data$x,Data$y)]
z.2 <- c(Data$x,Data$y)
z.2
z.2 <- Data$x,Data$y
z.2 <- Data$x&Data$y
z.2
z.2 <- Data[x,y]
Data[x]
z.2 <- Data["x","y"]
z.2
z.2 <- Data[Data$"x",Data$"y"]
Data$x
z.2 <- cbind(Data$x, Data$y)
z.2
Data <- data.frame(z.1,z.2)
Data <- data.frame(z.1,z.2)
z.1 <- c(3,6,9,12,15,18,21,24,27,30)
Data <- data.frame(z.1,z.2)
plot(Data)
graph <- ggplot(facebookData, aes(NPQC_R_Total, Rating))
graph <- x
graph <- "x"
graph <- "x"
save.image("C:/Users/Kie/OneDrive/DataAnalytics/ryerson-data.analytics/CKME132/Lab/Lab 3 - week 6/CKME132_Lab3(3).RData")
data.frame(x=0:100, px=dbinom(100, size=3, (3/7)))
data.frame(x=0:100, px=dbinom(100, size=3, prob=(3/7)))
dbinom(10,size=3,prob=(3/7))
prob=(3/7)
prob
dbinom(10,size=3,prob=prob)
prob=(3/7)
proba
proba=(3/7)
proba
dbinom(10,size=3,prob=proba)
dbinom(10,size=3,prob=0.4285714)
rbinom(10,size=3,prob=0.4285714)
rbinom(10,size=3,prob=3/7)
data.frame(x=0:100, px=rbinom(100, size=3, prob=(3/7)))
data.frame(x=1:100, px=rbinom(100, size=3, prob=(3/7)))
Binom.Distributions <- data.frame(x=1:100, px=rbinom(100, size=3, prob=(3/7)))
table(Binom.Distributions)
Binom.Distributions <- data.frame(px=rbinom(100, size=3, prob=(3/7)))
table(Binom.Distributions)
Binom.D <- data.frame(px=rbinom(100, size=3, prob=(3/7)))
hist(Binom.D)
hist(table(Binom.D))
set.seed()
set.seed(1)
Binom.D <- data.frame(px=rbinom(100, size=3, prob=(3/7)))
hist(table(Binom.D))
hist(Binom.D)
barplot(table(Binom.D))
marbleMean <- 100*(3/7)
marbleMean
marbleMean <- 3*(3/7)
marbleMean
marbleVar <- (3*(3/7))(1-(3/7))
marbleVar <- (3*(3/7))*(1-(3/7))
marbleVar
marbleStDev <- sqrt(marbleVar)
marbleStDev
.857 *.857
factorial(2)
factorial(3)
factorial(4-1)
twoWhite <- (factorial(4) / (factorial(2)*factorial(4-2))
twoWhite <- (factorial(4) / (factorial(2)*factorial(4-2)))
twoWhite <- (factorial(4) / (factorial(2)*factorial(4-2)))
twoWhite
oneRed <- (factorial(3) / (factorial(1)*factorial(3-1)))
allCombinations <- (factorial(7) / (factorial(3)*factorial(7-3)))
(twoWhite * oneRed) / allCombinations
install.packages("combinat")
library(combinat)
combn(4,2)
comb = function(n, x) {
return(factorial(n) / (factorial(x) * factorial(n-x)))
}
twoWhite
twoWhite <- comb(4,2)
twoWhite
oneRed <- comb(3,1)
all Combinations(7,3)
allCombinations(7,3)
(twoWhite * oneRed) / allCombinations
allComb <- comb(7,3)
(twoWhite * oneRed) / allComb
successProb <- 3/7
failureProb <- 1 - (3/7)
allComb * ((successProb)^2) * (failureProb)^(3-2)
successProb
failureProb
allComb * ((successProb)^2) * ((failureProb)^(3-2))
allComb <- comb(7,3)
successProb <- 4/7
failureProb <- (1 - (4/7))
allComb * ((successProb)^2) * ((failureProb)^(3-2))
allComb <- comb(3,2)
successProb <- 4/7
failureProb <- (1 - (4/7))
allComb * ((successProb)^2) * ((failureProb)^(3-2))
binomialProb <- function(trials,successes,successrate){
(comb(trials,successes)) * (successrate^successes) *((1 - sucessrate)^(trials-successes))
}
binomialProb(3,2,(4/7))
binomialProb <- function(trials,successes,successrate){
(comb(trials,successes)) * (successrate^successes) *((1 - successrate)^(trials-successes))
}
binomialProb(3,2,(4/7))
binomialProb(3,2,(3/7) + binomialProb(3,3,(3/7)
))
binomialProb(3,2,(3/7)) + binomialProb(3,3,(3/7))
1 - binomialProb(3,1,(3/7))
(comb(totTrial,totSuccess)) * (rateSuccess^totSuccess) *((1 - rateSuccess)^(TotTrials-totSuccess))
binomialProb <- function(totTrial,totsuccess,rateSuccess){
(comb(totTrial,totSuccess)) * (rateSuccess^totSuccess) *((1 - rateSuccess)^(TotTrials-totSuccess))
}
binomialProb(3,2,(4/7))
binomialProb <- function(totTrial,totSuccess,rateSuccess){
(comb(totTrial,totSuccess)) * (rateSuccess^totSuccess) *((1 - rateSuccess)^(TotTrials-totSuccess))
}
binomialProb(3,2,(4/7))
binomialProb <- function(totTrial,totSuccess,rateSuccess){
(comb(totTrial,totSuccess)) * (rateSuccess^totSuccess) *((1 - rateSuccess)^(TotTrial-totSuccess))
}
binomialProb(3,2,(4/7))
binomialProb <- function(totTrial,totSuccess,rateSuccess){
(comb(totTrial,totSuccess)) * (rateSuccess^totSuccess) *((1 - rateSuccess)^(totTrial-totSuccess))
}
binomialProb(3,2,(4/7))
binomialProb(3,2,(3/7)) + binomialProb(3,3,(3/7))
1 - binomialProb(3,1,(3/7))
binomialProb(3,2,(3/7))
binomialProb(3,3,(3/7))
binomialProb(3,2,(3/7)) + binomialProb(3,3,(3/7))
1 - binomialProb(3,1,(3/7))
binomialProb(3,1,(3/7))
binomialProb(3,2,(3/7)) + binomialProb(3,3,(3/7)) + binomialProb(3,1,(3/7))
1 - binomialProb(3,1,(3/7)) - binomialProb(3,0,(3/7))
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
library(XML)
install.packages("XML")
library(XML)
htmlCode
url <- http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en
html <- htmlTreeParse(url, useInternalNodes = T)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
x <- xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
x
install.packages("httr")
library(httr)
html2 = GET(url)
content2 = contant(html2, as="text")
content2 = content(html2, as="text")
parsedHtml = htmlParse(content2, asText=TRUE)
xpathSApply(html, "//title", xmlValue)
xpathSApply(parsedHtml, "//title", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user", "passwd"))
pg2
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user", "passwd"))
pg2
names[pg2]
names(pg2)
google = handle("http://google.com")
pg1 = GET(handle=google, path="/")
pg2 = GET(handle=google, path="search")
install.packages("RjsonIO")
install.packages("RJSONIO")
library(RJSONIO)
install.packages("JSONLITE")
install.packages("jsonlite")
library(jsonlite)
install.packages("RPostresSQL")
install.packages("RODBC")
install.packages("RMongo")
install.packages("rmongodb") # Rmongo
install.packages("jpeg")
install.packages("readbitmap")
install.packages("png")
install.packages("EBImage")
install.packages("rdgal")
install.packages("rgeos")
install.packages("raster")
myapp <- oauth_app("github",
key = "da99bd0a288392ced1ad",
secret = "    1214a825209fbcebab197376ba94b33493439351")
myapp <- oauth_app("github",
key = "da99bd0a288392ced1ad",
secret = "1214a825209fbcebab197376ba94b33493439351")
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), coursere-getData-Quiz2 )
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
homeTL = GET("https://api.github.com/users/jtleek/repos", gtoken)
names(homeTL)
head(homeTL)
jLeek = GET("https://api.github.com/users/jtleek/repos", gtoken)
names(jLeek)
head(jLeek)
json1 = content(jLeek)
json1
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "da99bd0a288392ced1ad",
secret = "1214a825209fbcebab197376ba94b33493439351")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
jLeek = GET("https://api.github.com/users/jtleek/repos", gtoken)
names(jLeek)
json1 = content(jLeek)
json1
myapp <- oauth_app("github",
key = "da99bd0a288392ced1ad",
secret = "7e35ce4fd0b3f8291127fa54dd29dd1cd7509581")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
jLeek = GET("https://api.github.com/users/jtleek/repos", gtoken)
head(jLeek)
json1 = content(jLeek)
json1
jLeek = GET("https://api.github.com/users/jtleek/repos", github_token)
jLeek = GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
stop_for_status(jLeek)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "da99bd0a288392ced1ad",
secret = "7e35ce4fd0b3f8291127fa54dd29dd1cd7509581")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
jLeek = GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(jLeek)
myapp <- oauth_app("coursera-getData-Quiz2 ",
key = "da99bd0a288392ced1ad",
secret = "7e35ce4fd0b3f8291127fa54dd29dd1cd7509581")
github_token <- oauth2.0_token(oauth_endpoints("coursera-getData-Quiz2 "), myapp)
myapp <- oauth_app("coursera-getData-Quiz2",
key = "da99bd0a288392ced1ad",
secret = "7e35ce4fd0b3f8291127fa54dd29dd1cd7509581")
github_token <- oauth2.0_token(oauth_endpoints("coursera-getData-Quiz2"), myapp)
myapp <- oauth_app("github",
key = "da99bd0a288392ced1ad",
secret = "7e35ce4fd0b3f8291127fa54dd29dd1cd7509581")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
jLeek = GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(jLeek)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "da99bd0a288392ced1ad",
secret = "378180056dd13113bbb6ef81cfb592fa39266ffc")
?oauth2.0_token
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
jLeek = GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(jLeek)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "da99bd0a288392ced1ad",
secret = "62fe374a27655dbeee43dc3898c22ae88c951a97")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
jLeek = GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(jLeek)
?stop_for_status
json1 = content(jLeek)
json1
json2 = jsonlite::fromJSON(toJSON(json1)) # use json lite to reformat to dataframe. convert into json, use jsonlite fomJSON to convert to json
json2
names(json2)
json2["name" == "https://github.com/jtleek/datasharing.git",]
json2[name == "https://github.com/jtleek/datasharing.git",]
json2[name %in% "https://github.com/jtleek/datasharing.git",]
json2[name]
json2["name"]
json2["name" == datasharing,]
json2["name" == "datasharing",]
json2["name" %in% "datasharing",]
?which
json2[which(json2["name"] == "satasharing"), ]
json2[which(json2["name"] == "datasharing"), ]
json2[which(json2["name"] == "datasharing"), json2["created_at"]]
json2[which(json2["name"] == "datasharing"), json2["created_at"]}
json2[which(json2["name"] == "datasharing"), json2["created_at"]]
d
json2[which(json2["name"] == "datasharing"), "created_at"]
acs <- dbConnect(MySQL(),
host="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ")
library(RMySQL)
library(dplyr)
acs <- dbConnect(MySQL(),
host="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ")
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
install.packages("sqldf")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
head(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
?sqldf
sqldf("select pwgtp1 from acs where AGEP < 50", drv = "MySQL")
sqldf("select pwgtp1 from acs where AGEP < 50", drv = "MySQL", dbname = "acs")
sqldf("select pwgtp1 from acs where AGEP < 50", drv = "MySQL", host = 'localhost')
sqldf("select pwgtp1 from acs where AGEP < 50", host = 'localhost')
setwd("C:/Users/Kie/Desktop")
if(!file.exists("./UCI HAR Dataset")){
download.file(fileUrl, "./projectdataset.zip")
unzip("projectdataset.zip")
}
if(!file.exists("./UCI HAR Dataset")){
download.file(fileUrl, "./projectdataset.zip")
unzip("projectdataset.zip")
}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
if(!file.exists("./UCI HAR Dataset")){
download.file(fileUrl, "./projectdataset.zip")
unzip("projectdataset.zip")
}
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
if(!file.exists("./FNEI_data.zip")){
download.file(fileUrl, "./projectdataset.zip")
unzip("projectdataset.zip")
}
setwd("C:/Users/Kie/OneDrive/DataAnalytics/Coursera/4-explore/project")
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
if(!file.exists("./FNEI_data.zip")){
download.file(fileUrl, "./projectdataset.zip")
unzip("projectdataset.zip")
}
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
with(NEI, plot(year, Emissions, type = "n"))
with(subset(NEI, year == 1999), points(year, Emissions))
NEI$year <- factor(NEI$year)
with(NEI, plot(year, sum(Emissions)))
with(NEI, plot(year, sum(Emissions), type = "n"))
str(SCC)
