aes(x = Petal.Width, y = Petal.Length),
color = Species)
g + geom_point()
g <- ggplot(data = iris,
aes(x = Petal.Width, y = Petal.Length))
g + geom_point(color = Species)
View(iris)
g <- ggplot(data = iris,
aes(x = Petal.Width, y = Petal.Length, color = Species))
g + geom_point()
g <- ggplot(data = iris,
aes(x = Petal.Width,
y = Petal.Length,
color = Species,
shape = Species))
g + geom_point()
g <- ggplot(data = iris,
aes(x = Petal.Width,
y = Sepal.Width,
color = Species,
shape = Species))
g + geom_point()
View(mtcars)
carfit <- lm(wt ~ mpg + am + cyl, data = mtcars)
summary(carfit)
carfit <- lm(wt ~ mpg + am + cyl + drat, data = mtcars)
summary(carfit)
carfit <- lm(wt ~ mpg + cyl, data = mtcars)
summary(carfit)
carfit <- lm(wt ~ mpg + cyl + am, data = mtcars)
summary(carfit)
carfit <- lm(wt ~ mpg + cyl + am  + disp, data = mtcars)
summary(carfit)
predict(test, carfit)
predict(carfit, test)
pred <- predict(carfit, test)
pred
library(caret)
?confusionMatrix()
confusionMatrix(pred, train$wt)
pred
confusionMatrix(pred$wt, train$wt)
train$wt
pred$wt
summary(pred)
hist(mtcars$wt)
hist(mtcars$wt,
xlab = "Weight")
hist(mtcars$wt,
xlab = "Weight",
title = "Histogram of Car Weights")
hist(mtcars$wt,
xlab = "Weight",
main = "Histogram of Car Weights")
wt.Scaled <- scale(mtcars$wt)
hist(wt.Scaled,
xlab = "Weight",
main = "Histogram of Car Scaled Car Weights"))
wt.Scaled <- scale(mtcars$wt)
hist(wt.Scaled,
xlab = "Weight",
main = "Histogram of Car Scaled Car Weights"))
wt.Scaled <- scale(mtcars$wt)
hist(wt.Scaled,
xlab = "Weight",
main = "Histogram of Car Scaled Car Weights")
wt.Scaled <- scale(mtcars$wt)
hist(wt.Scaled,
xlab = "Weight",
main = "Histogram of Car Scaled Car Weights",
fill = "steelblue")
wt.Scaled <- scale(mtcars$wt)
hist(wt.Scaled,
xlab = "Weight",
main = "Histogram of Car Scaled Car Weights",
color = "steelblue")
hist(wt.Scaled,
xlab = "Weight",
main = "Histogram of Car Scaled Car Weights",
col = "steelblue")
hist(mtcars$wt,
xlab = "Weight",
main = "Histogram of Car Weights",
col = "steelblue")
hist(wt.Scaled,
xlab = "Weight",
main = "Histogram of Car Scaled Car Weights",
col = "steelblue")
g <- ggplot(data = iris,
aes(x = Petal.Width,
y = Sepal.Width,
color = Species,
shape = Species))
g + geom_point()
g + geom_point() + ggtitle("Iris Petal Width vs Sepal Width by Species")
g + geom_point() + ggtitle("Iris Petal Width /nvs /nSepal Width by Species")
```
g + geom_point() + ggtitle("Iris Petal Width \nvs \nSepal Width by Species")
g + geom_point() + ggtitle("Iris Petal Width vs Sepal Width \nby Species")
cbind(pred)
View(mtcars)
par(mfrow = c(1,2))
hist(mtcars$wt,
xlab = "Weight",
main = "Histogram of Car Weights",
col = "steelblue")
wt.Scaled <- scale(mtcars$wt)
hist(wt.Scaled,
xlab = "Weight",
main = "Histogram of Car Scaled Car Weights",
col = "steelblue")
hist(mtcars$wt,
xlab = "Weight",
main = "Histogram of Car Weights",
col = "steelblue")
ar(mfrow = c(1,2))
hist(mtcars$wt,
xlab = "Weight",
main = "Histogram of Car Weights",
col = "steelblue")
wt.Scaled <- scale(mtcars$wt)
hist(wt.Scaled,
xlab = "Weight",
main = "Histogram of Scaled Car Weights",
col = "steelblue")
```
library("RWeka") # rweka (embedded Weka software)
diabetes <- read.arff(system.file("arff", "diabetes.arff",
package = "RWeka"))
library("ROCR") # visualize performance of classifiers
library("caret") # for confusion matrix
library("e1071") # may be needed for caret
formula_text <- paste(names(mtcars)[9] ,"~",
paste(names(mtcars[c(4,1,10,11)]), collapse="+")
)
formula <- as.formula(formula_text)
formula
fit <- glm(formula,data=mtcars,family=binomial())
rn_train <- sample(nrow(mtcars),
floor(nrow(mtcars)*0.7))
train <- mtcars[rn_train,]
test <- mtcars[-rn_train,]
fit <- lm(formula, data=train)
test$scores <- predict(fit, type="response",
newdata=test)
pred<-prediction(test$scores, test$am)
c <- confusionMatrix(as.integer(test$scores > 0.5),
test$am)
c$table
perf<-performance(pred,"tpr","fpr")
plot(perf, lty=1)
perf<-performance(pred,"tpr","fpr")
library("RWeka") # rweka (embedded Weka software)
diabetes <- read.arff(system.file("arff", "diabetes.arff",
package = "RWeka"))
library("ROCR") # visualize performance of classifiers
library("caret") # for confusion matrix
library("e1071") # may be needed for caret
install.packages("ROCR")
library("ROCR") # visualize performance of classifiers
perf<-performance(pred,"tpr","fpr")
?performance
perf<-performance(pred,"tpr","fpr")
perf<-performance(pred,tpr,fpr)
pred<-prediction(test$scores, test$am)
perf<-performance(pred,"tpr","fpr")
plot(perf, lty=1)
mtcars2 <- mtcars
mtcars2[, "am"] <- as.factor(mtcars2[, "am"])
weka_fit <- Logistic(formula,
data = mtcars2)
evaluate_Weka_classifier(weka_fit, numFolds = 10)
data(olive)
load("C:/Users/Kie/OneDrive/DataAnalytics/Coursera/8-practicalmachinelearning/olive.rda")
newdata = as.data.frame(t(colMeans(olive)))
View(olive)
olive <- olive[,-2]
inTrain <- createDataPartition(y=olive$Area,
p=0.7,
list=FALSE)
library(caret)
inTrain <- createDataPartition(y=olive$Area,
p=0.7,
list=FALSE)
olive
View(olive)
inTrain <- createDataPartition(y=olive,
p=0.7,
list=FALSE)
inTrain <- createDataPartition(y=olive$Region,
p=0.7,
list=FALSE)
training <- segO[inTrain,]
testing <- segO[-inTrain,]
training <- olive[inTrain,]
testing <- olive[-inTrain,]
modFit <- train(Area ~ .,
method="rpart",
data=training)
library(AppliedPredictiveModeling)
segO <- segmentationOriginal
data(segmentationOriginal)
segO <- segmentationOriginal
segO <- sego[,-3]
segO <- segmentationOriginal
segO <- segO[,-3]
inTrain <- createDataPartition(y=segO$Case,
p=0.7,
list=FALSE)
training <- segO[inTrain,]
testing <- segO[-inTrain,]
modFit <- train(Class ~ .,
method="rpart",
data=training)
data(olive)
load("C:/Users/Kie/OneDrive/DataAnalytics/Coursera/8-practicalmachinelearning/olive.rda")
View(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
newdata
inTrain <- createDataPartition(y=olive$Region,
p=0.7,
list=FALSE)
inTrain <- createDataPartition(y=olive$Area,
p=0.7,
list=FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
modFit <- train(Area ~ .,
method="rpart",
data=training)
print(modFit$finalModel)
predict(modFit, newdata = newdata)
tree.pred=predict(tree(olive$Area ~ . ,olive) ,newdata)
library("tree")
install.packagaes("tree")
install.packages("tree")
library("tree")
newdata = as.data.frame(t(colMeans(olive)))
tree.pred=predict(tree(olive$Area ~ . ,olive) ,newdata)
tree.pred
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed("13234")
View(SAheart)
modFit <- train(chd ~ .age + alcohol + obesity + tobacco + typea + ldl,
method="glm",
family = "binom"
data=train)
modFit <- train(chd ~ .age + alcohol + obesity + tobacco + typea + ldl,
method="glm",
family = "binom",
data=train)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",
family = "binom",
data=train)
View(training)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",
family = "binom",
data=trainSA)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
trainSA
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",
family = "binom",
data=trainSA)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",
family = "binomial",
data=trainSA)
pred <- predict(modFit, testSA)
pred
trainSA
missClass = function(values,prediction){sum(((pred > 0.5)*1) != testSA)/length(testSA)}
missClass
missClass(testSA, pred)
modFit <- train(formula,
method="glm",
family = "binomial",
data=trainSA)
formula <- "chd ~ age + alcohol + obesity + tobacco + typea + ldl"
modFit <- train(formula,
method="glm",
family = "binomial",
data=trainSA)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",
family = "binomial",
data=trainSA)
str(trainSA$chd)
pred <- predict(modFit, newdata = testSA)
table(pred)
testSA
missClass(testSA$chd, pred)
testSA$chd
pred
missClass(testSA$chd, pred)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, pred)
missClass(trainSA$chd, pred)
set.seed("13234")
pred <- predict(modFit, newdata = testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, pred)
missClass(testSA$chd, pred)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed("13234")
set.seed("13234")
formula <- chd ~ age + alcohol + obesity + tobacco + typea + ldl
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",
family = "binomial",
data=trainSA)
pred <- predict(modFit, newdata = testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, pred)
missClass(testSA$chd, pred)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
?varImp
modFit <- train(y ~ .,
data=vowel.train,
method = "rf",
prox = TRUE) # produces some extra information
varImp(modFit)
segO <- segmentationOriginal
names(segO)
training <- segO[inTrain,]
testing <- segO[-inTrain,]
inTrain <- createDataPartition(y=segO$Case,
p=0.7,
list=FALSE)
training <- segO[inTrain,]
testing <- segO[-inTrain,]
modFit <- train(Class ~ .,
method="rpart",
data=training)
rpart.plot(modFit$finalModel)
library(rpart.plot)
rpart.plot(modFit$finalModel)
setwd("C:/Users/Kie/OneDrive/DataAnalytics/Coursera/8-practicalmachinelearning/course-project")
fileUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if(!file.exists("./pml-training.csv")){
download.file(fileUrl, "./pml-training.csv")
}
if(!file.exists("./pml-training.csv")){
download.file(fileUrl2, "./pml-training.csv")
}
if(!file.exists("./pml-training.csv")){
download.file(fileUrl, "./pml-training.csv")
}
if(!file.exists("./pml-testing.csv")){
download.file(fileUrl2, "./pml-testing.csv")
}
read.csv("pml-training.csv", headers = TRUE, stringsAsFactors = FALSE)
train <- read.csv("pml-training.csv", header = TRUE, stringsAsFactors = FALSE)
test <- read.csv("pml-testing.csv", header = TRUE, stringsAsFactors = FALSE)
names(train)
head(x)
head(train$x)
head(train$X)
View(test)
View(train)
install.packages("doParallel")
library(doParallel)
registerDoParallel(cores=2)
names(train)
inTrain <- createDataPartition(y = train$classe,
p = 0.7,
list = FALSE)
library(caret)
system.time(inTrain <- createDataPartition(y = train$classe,
p = 0.7,
list = FALSE))
trainSamp <- iris[inTrain, ]
testSamp  <- iris[-inTrain, ]
system.time(
modFit <- train(classe ~ .,
data=trainSamp,
method = "rf",
prox = TRUE) # produces some extra information
)
trainSamp <- train[inTrain, ]
testSamp  <- train[-inTrain, ]
system.time(
modFit <- train(classe ~ .,
data=trainSamp,
method = "rf",
prox = TRUE) # produces some extra information
)
train <- read.csv("pml-training.csv", header = TRUE)
test <- read.csv("pml-testing.csv", header = TRUE)
inTrain <- createDataPartition(y = train$classe,
p = 0.7,
list = FALSE)
trainSamp <- train[inTrain, ]
testSamp  <- train[-inTrain, ]
system.time(
modFit <- train(classe ~ .,
data=trainSamp,
method = "rf",
prox = TRUE) # produces some extra information
)
inTrain <- createDataPartition(y = train$classe,
p = 0.6,
list = FALSE)
trainSamp <- train[inTrain, ]
testSamp  <- train[-inTrain, ]
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 3)
system.time(
rfFit1 <- train(classe ~ .,
data=trainSamp,
preProcess = "pca",
method = "rf",
prox = TRUE) # produces some extra information
)
rfFit1 <- train(classe ~ .,
data=trainSamp,
preProcess = "pca",
method = "rf",
prox = TRUE)
class(trainSamp$classe)
system.time(
rfFit1 <- train(classe ~ .,
data=trainSamp[1:6],
preProcess = "pca",
method = "rf",
prox = TRUE) # produces some extra information
)
system.time(
rfFit1 <- train(classe ~ .,
data=trainSamp[1:6,],
preProcess = "pca",
method = "rf",
prox = TRUE) # produces some extra information
)
system.time(
rfFit1 <- train(classe ~ .,
data=trainSamp[1:50,],
preProcess = "pca",
method = "rf",
prox = TRUE) # produces some extra information
)
system.time(
rfFit1 <- train(classe ~ .,
data=trainSamp[1:50,],
#               preProcess = "pca",
method = "rf",
prox = TRUE) # produces some extra information
)
table(class(trainSamp))
table(class(trainSamp[,]))
table(class(trainSamp[names(trainSamp)]))
trainSamp[names(trainSamp)]
table(class(trainSamp$names(trainSamp)))
trainSamp$names(trainSamp)
View(trainSamp)
View(testSamp)
train <- train[, colSums(is.na(train)) < nrow(train) * 0.5]
train <- train[ , lapply(train, is.numeric) == TRUE]
inTrain <- createDataPartition(y = train$classe,
p = 0.6,
list = FALSE)
trainSamp <- train[inTrain, ]
testSamp  <- train[-inTrain, ]
View(train)
train$classe
train <- read.csv("pml-training.csv", header = TRUE)
classe <- train$classe
train <- train[, colSums(is.na(train)) < nrow(train) * 0.5]
train <- train[ , lapply(train, is.numeric) == TRUE]
train <- cbind(train, classe)
classe <- head(train$classe)
head(train$classe)
classe <- train$classe
inTrain <- createDataPartition(y = train$classe,
p = 0.6,
list = FALSE)
trainSamp <- train[inTrain, ]
testSamp  <- train[-inTrain, ]
rfFit1 <- train(classe ~ .,
data=trainSamp[1:50,],
preProcess = "pca",
method = "rf",
prox = TRUE) # produces some extra information
View(trainSamp)
rfFit1 <- train(classe ~ .,
data = trainSamp,
method = "rf",
prox = TRUE) # produces some extra information
